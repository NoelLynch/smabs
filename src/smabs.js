// Generated by CoffeeScript 1.4.0
var AssembleFilesPhase, CoffeeScriptCompilePhase, FileSys, MinifyJSPhase, SMABSFileSys, Templates, args, doGetTemplate, doHelp, doSaveTemplate, getTargetPhases, loadBuildConf, processArgs, run;

FileSys = require("fs");

SMABSFileSys = require("./SMABSUtils");

Templates = require("./templates");

AssembleFilesPhase = require("./phases/AssembleFilesPhase");

CoffeeScriptCompilePhase = require("./phases/CoffeeScriptCompilePhase");

MinifyJSPhase = require("./phases/MinifyJSPhase");

args = {
  buildJSON: "build.json",
  rootDir: "./",
  target: ""
};

processArgs = function() {
  var r,
    _this = this;
  console.log("processing args");
  r = true;
  process.argv.forEach(function(val, idx, array) {
    switch (val) {
      case "-b":
        return args.buildJSON = array[idx + 1];
      case "-w":
        return args.rootDir = array[idx + 1];
      case "-t":
        return args.target = array[idx + 1];
      case "-template":
        if (array[idx + 1] === "get") {
          doGetTemplate(array[idx + 2], array[idx + 3]);
        } else if (array[idx + 1] === "save") {
          doSaveTemplate(array[idx + 2], array[idx + 3]);
        }
        return r = false;
      case "-h":
        doHelp();
        return r = false;
    }
  });
  console.log("\targs processing done\n\n");
  return r;
};

doSaveTemplate = function(name, dir) {
  var conf;
  conf = loadBuildConf();
  return Templates.doSaveTemplate(name, dir, args, conf);
};

doGetTemplate = function(name, dir) {
  var conf;
  conf = loadBuildConf();
  return Templates.doGetTemplate(name, dir, args, conf);
};

doHelp = function() {
  return console.log("\n**************************\n\nsmabs : (SMall Ass Build System)\nusage\n\t-b filename : specifies the json config file, default is build.json\n\t-w workingDirectory : specifies the working directory, default is .\n\t-t targetName : specifies the target to execute, default can be defined in build.json or else attempts an 'all' target\n\t-template get/save, templateName, directory (save - snapshots this directory, get - loads into this directory) :\n\t\tget : load the template contents into the directory\n\t\tsave : create a template by snapshoting the contents of the directory\n\n\n**************************");
};

getTargetPhases = function(name, conf) {
  if (conf.targets[name] != null) {
    return conf.targets[name];
  }
  return [];
};

run = function() {
  var conf, p, phase, r, targetPhases, _i, _len, _results;
  console.log("\n\n...smabs starting...\n\n");
  r = processArgs();
  console.log(r);
  if (!r) {
    return;
  }
  conf = loadBuildConf();
  if (!(conf != null)) {
    return;
  }
  if (args.target.length === 0) {
    if (conf.defaultTarget != null) {
      args.target = conf.defaultTarget;
    }
  }
  if (args.target.length === 0) {
    console.log("*** You must specify a target either in the build.json or via the command line -t");
    return;
  }
  console.log("Running Target : '" + args.target + "'\n");
  targetPhases = getTargetPhases(args.target, conf);
  console.log("Target phases " + targetPhases + "\n\n");
  _results = [];
  for (_i = 0, _len = targetPhases.length; _i < _len; _i++) {
    phase = targetPhases[_i];
    if (conf.phases[phase] != null) {
      p = conf.phases[phase];
      console.log("executing phase '" + phase + "' : type = " + p.type);
      switch (p.type) {
        case "assemble":
          AssembleFilesPhase.doPhase(p, args);
          break;
        case "coffeeCompile":
          CoffeeScriptCompilePhase.doPhase(p, args);
          break;
        case "minifyJS":
          MinifyJSPhase.doPhase(p, args);
      }
      _results.push(console.log("...Phase complete\n\n"));
    } else {
      _results.push(console.log("\t*** No phase defined for " + phase));
    }
  }
  return _results;
};

loadBuildConf = function() {
  var conf;
  if (!FileSys.existsSync(args.rootDir + args.buildJSON)) {
    console.log("*** Cannot locate a build config file, usually this is build.json in the working directory, see -h for details");
    return null;
  }
  conf = FileSys.readFileSync(args.rootDir + args.buildJSON, "utf8");
  return JSON.parse(conf);
};

run();
